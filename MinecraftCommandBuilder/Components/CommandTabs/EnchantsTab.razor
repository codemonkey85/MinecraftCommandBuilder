<h3>Enchantments</h3>

<MudStack>
    <PlayerNameComponent />

    <MudAutocomplete T="Enchantment" Label="Select an enchantment" @bind-Value="SelectedEnchantment"
        SearchFunc="@Search" ToStringFunc="@ToString" Clearable />

    <MudNumericField T="int" Label="Level" Min="1" Max="@(SelectedEnchantment?.maxLevel ?? 1)" @bind-Value="@Level" />

    <MudButton ButtonType="@ButtonType.Submit" Variant="@Variant.Filled" Color="@Color.Primary"
        OnClick="@GenerateCommand" Disabled="@GenerateCommandDisabled" title="Generate command">
        Generate command
    </MudButton>

    <h4>My Favorite Enchantments</h4>

    @RenderBestEnchants("Pickaxe", BestPickaxeEnchantments)
    @RenderBestEnchants("Sword", BestSwordEnchantments)
    @RenderBestEnchants("Axe", BestAxeEnchantments)
    @RenderBestEnchants("Shovel", BestShovelEnchantments)
    @RenderBestEnchants("Hoe", BestHoeEnchantments)

</MudStack>

@code {
    private RenderFragment RenderBestEnchants(string title, List<Enchantment> enchantments)
    {
        return
    @<MudStack Class="my-3">
        <h5>
            @title
        </h5>
        @if(enchantments is { Count: > 0 })
    {
    foreach(var enchantment in enchantments)
    {
    var command = GenerateBestEnchantCommand(enchantment);
        <MudStack Row="@true">
            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" OnClick="@(async _ => await CopyCommand(command))"
                Title="Copy" />
            <MudInput T="string" Label="Command Text" Value="@command" Variant="@Variant.Outlined" ReadOnly />
        </MudStack>
    }
    }
    </MudStack>;
    }
}
